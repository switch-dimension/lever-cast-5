// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String                 @id @default(cuid())
  clerkId           String                 @unique
  email             String                 @unique
  name              String?
  posts             Post[]
  templates         Template[]
  platformSettings  UserPlatformSettings[]
  socialConnections SocialConnection[]
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
}

model Post {
  id               String        @id @default(cuid())
  title            String
  content          String
  published        Boolean       @default(false)
  author           User          @relation(fields: [authorId], references: [id])
  authorId         String
  template         Template?     @relation(fields: [templateId], references: [id])
  templateId       String?
  platformContents PostContent[] // Relation to platform-specific content
  metadata         Json? // Stores additional metadata like image URLs
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@index([authorId])
  @@index([templateId])
}

model Template {
  id          String                @id @default(cuid())
  name        String
  description String?
  prompts     Json // Stores the template prompts as a JSON object
  author      User                  @relation(fields: [authorId], references: [id])
  authorId    String
  posts       Post[]
  platforms   SocialMediaPlatform[] // The platforms this template supports
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  @@index([authorId])
}

model SocialMediaPlatform {
  id           String                 @id @default(cuid())
  name         String                 @unique
  templates    Template[]
  userSettings UserPlatformSettings[]
  postContents PostContent[] // Relation to post content
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}

model UserPlatformSettings {
  id         String              @id @default(cuid())
  user       User                @relation(fields: [userId], references: [id])
  userId     String
  platform   SocialMediaPlatform @relation(fields: [platformId], references: [id])
  platformId String
  settings   Json // Stores platform-specific settings as a JSON object
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@unique([userId, platformId])
  @@index([userId])
  @@index([platformId])
}

// New model for platform-specific content
model PostContent {
  id         String              @id @default(cuid())
  content    String // Platform-specific content
  post       Post                @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String
  platform   SocialMediaPlatform @relation(fields: [platformId], references: [id])
  platformId String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  @@unique([postId, platformId])
  @@index([postId])
  @@index([platformId])
}

model SocialConnection {
  id                String    @id @default(cuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String
  provider          String // 'linkedin', etc.
  accessToken       String
  refreshToken      String?
  tokenExpiry       DateTime?
  providerAccountId String
  metadata          Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
}
